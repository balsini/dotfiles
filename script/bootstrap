#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  [ -f git/gitconfig.symlink ] && return
  info 'Setup gitconfig'

  git_credential='cache'
  if [ "$(uname -s)" == "Darwin" ]
  then
    git_credential='osxkeychain'
  fi

  user ' - What is your GIT author name?'
  read -e git_authorname
  user ' - What is your GIT author email?'
  read -e git_authoremail
  user ' - What is your GIT sign key?'
  read -e git_authorkey

  sed -e "s/AUTHORNAME/$git_authorname/g" \
      -e "s/AUTHOREMAIL/$git_authoremail/g" \
      -e "s/AUTHORKEY/$git_authorkey/g" \
      -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
      git/gitconfig.symlink.example > git/gitconfig.symlink

  success 'gitconfig'
}

setup_zshell() {
[ -d zsh/oh-my-zsh ] && return
info 'Setup ZShell\n'
git clone git://github.com/robbyrussell/oh-my-zsh.git zsh/oh-my-zsh
success 'ZShell'
}

setup_fonts() {
echo -n 'Do you want to download patched fonts? [N/y]: '
read RESP
[ x${RESP,,} == xy ] || return
echo 'Download patched fonts...'
[ -d $DOTFILES_ROOT/fonts ] || mkdir $DOTFILES_ROOT/fonts
cd $DOTFILES_ROOT/fonts
wget https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf
wget https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf
echo 'Updating fonts cache [~/.fonts]...'
[ -d ~/.fonts ] || mkdir ~/.fonts
ln -fs $DOTFILES_ROOT/tmux/PowerlineSymbols.otf ~/.fonts/PowerlineSymbols.otf
fc-cache -vf ~/.fonts
echo 'Setup fontconfig...'$DOTFILES_ROOT/tmux/
[ -d ~/.fonts.conf.d ] || mkdir ~/.fonts.conf.d
[ -d ~/.config/fontconfig/conf.d/ ] || mkdir -p ~/.config/fontconfig/conf.d
ln -fs $DOTFILES_ROOT/tmux/10-powerline-symbols.conf ~/.fonts.conf.d/10-powerline-symbols.conf
ln -fs $DOTFILES_ROOT/tmux/10-powerline-symbols.conf ~/.config/fontconfig/conf.d/10-powerline-symbols.conf
}

setup_vim() {
[ -d $DOTFILES_ROOT/vim/bundle/vundle ] && return
info 'Setup VIM (using vundle)\n'
[ -d $DOTFILES_ROOT/vim/bundle ] || mkdir $DOTFILES_ROOT/vim/bundle
cd $DOTFILES_ROOT/vim/bundle
git clone https://github.com/gmarik/vundle.git
cd $DOTFILES_ROOT
ln -fs $DOTFILES_ROOT/vim ~/.vim
vim +BundleInstall +qall
success 'VIM'
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done

  # Symlink dotfile root to home directory
  [ -L ~/.dotfiles ] || ln -fs $DOTFILES_ROOT ~/.dotfiles

}

setup_gitconfig
setup_zshell
install_dotfiles
setup_fonts
setup_vim

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if . bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi


echo ''
echo '  All installed!'
