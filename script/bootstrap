#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34mInfo\033[0m ] $1"
}

warn () {
  printf "  [ \033[00;35mWarn\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m????\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32m OK \033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

install_packages () {

DISTRO_ID=$(lsb_release -si)
DISTRO_VERSION=$(lsb_release -sr)
DISTRO_CODENAME=$(lsb_release -sc)
SCRIPT="$HOME/dotfiles/script/add_packages_${DISTRO_ID,,}"

info "Looking for [$SCRIPT]...\n"
if [ ! -f $SCRIPT ]; then
  fail "Distribution [$DISTRO_ID] not supported"
  warn "You should provide a [$SCRIPT] installation script"
  return
fi

info "Found [$SCRIPT]...\n"
user "Do you want to download additional $DISTRO_ID packages? [N/y]: "
read RESP
[ x${RESP,,} == xy ] || return

# Checking for distro specific installation script
info "Installing additional $DISTRO_ID packages...\n"
sudo $SCRIPT

}

setup_gitconfig () {
  [ -f git/gitconfig.symlink ] && return
  info 'Setup gitconfig'

  git_credential='cache'
  if [ "$(uname -s)" == "Darwin" ]
  then
    git_credential='osxkeychain'
  fi

  user ' - What is your GIT author name?'
  read -e git_authorname
  user ' - What is your GIT author email?'
  read -e git_authoremail
  user ' - What is your GIT sign key?'
  read -e git_authorkey

  sed -e "s/AUTHORNAME/$git_authorname/g" \
      -e "s/AUTHOREMAIL/$git_authoremail/g" \
      -e "s/AUTHORKEY/$git_authorkey/g" \
      -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
      git/gitconfig.symlink.example > git/gitconfig.symlink

  success 'gitconfig'
}

setup_zshell() {
[ -d zsh/oh-my-zsh ] && return
info 'Setup ZShell\n'
git clone git://github.com/robbyrussell/oh-my-zsh.git zsh/oh-my-zsh
success 'ZShell'
}

setup_fonts() {
echo -n 'Do you want to download patched fonts? [N/y]: '
read RESP
[ x${RESP,,} == xy ] || return
echo 'Download patched fonts...'
[ -d $DOTFILES_ROOT/fonts ] || mkdir $DOTFILES_ROOT/fonts
cd $DOTFILES_ROOT/fonts
wget https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf
wget https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf
echo 'Updating fonts cache [~/.fonts]...'
[ -d ~/.fonts ] || mkdir ~/.fonts
ln -fs $DOTFILES_ROOT/tmux/PowerlineSymbols.otf ~/.fonts/PowerlineSymbols.otf
fc-cache -vf ~/.fonts
echo 'Setup fontconfig...'$DOTFILES_ROOT/tmux/
[ -d ~/.fonts.conf.d ] || mkdir ~/.fonts.conf.d
[ -d ~/.config/fontconfig/conf.d/ ] || mkdir -p ~/.config/fontconfig/conf.d
ln -fs $DOTFILES_ROOT/tmux/10-powerline-symbols.conf ~/.fonts.conf.d/10-powerline-symbols.conf
ln -fs $DOTFILES_ROOT/tmux/10-powerline-symbols.conf ~/.config/fontconfig/conf.d/10-powerline-symbols.conf
}

setup_vim() {
[ -d $DOTFILES_ROOT/vim/bundle/vundle ] && return
info 'Setup VIM (using vundle)\n'
[ -d $DOTFILES_ROOT/vim/bundle ] || mkdir $DOTFILES_ROOT/vim/bundle
cd $DOTFILES_ROOT/vim/bundle
git clone https://github.com/gmarik/vundle.git
cd $DOTFILES_ROOT
ln -fs $DOTFILES_ROOT/vim ~/.vim
vim +BundleInstall +qall
success 'VIM'
}

setup_gpg() {
  info 'Setup GPG\n'
  if [ -f ~/.gnupg/secring.gpg ]; then
    info "Using existing GPG keyring [~/.gnupg/secring.gpg]"
    echo
    gpg -K
  else
    info "Setting up new GPG keyring..."
    gpg --gen-key
  fi
  success 'GPG'
}

setup_mutt() {
  info 'Setup MUTT\n'

  user ' - What is your GMail real name?'
  read -e gmail_realname
  user ' - What is your GMail username?'
  read -e gmail_username
  if [ -z $EDITOR ]; then
    warn ' Please, edit [~/dotfiles/mutt/signature] to setup your signature!\n'
    warn ' Press a key once done... '
    read
  else
    warn ' Press a key to edit you email signature '
    read -n 1
    $EDITOR ~/dotfiles/mutt/signature
  fi
  success 'Using email signature:'
  cat ~/dotfiles/mutt/signature
  user ' - What is your GMail password?'
  read -e gmail_password
  info 'Available GPG IDs:'
  echo
  gpg -K
  user ' - What is the GPG ID to use for GMail passowrd protection?'
  read -e gpg_id

  info 'Setup folders...'
  umask 077
  mkdir -p ~/.mutt/msmtp_queues
  mkdir -p ~/.mutt/cache

  info 'Setup MSMTP client...'
  sed -e "s/GMAIL_USERNAME/$gmail_username/g" \
    ~/dotfiles/mutt/msmtprc.symlink.example > ~/dotfiles/mutt/msmtprc.symlink
  echo "$gmail_password"  > ~/.mutt/gmail_$gmail_username
  gpg -e -r "$gpg_id" ~/.mutt/gmail_$gmail_username
  shred -xu ~/.mutt/gmail_$gmail_username

  info 'Setup credentials...'
  echo "set my_gmail_realname = \"$gmail_realname\""  > ~/.mutt/gmail_credentials
  echo "set my_gmail_username = \"$gmail_username\"" >> ~/.mutt/gmail_credentials
  echo "set my_gmail_password = \"$gmail_password\"" >> ~/.mutt/gmail_credentials

  gpg -e -r "$gpg_id" ~/.mutt/gmail_credentials
  shred -xu ~/.mutt/gmail_credentials
  success 'MUTT'
}

setup_imap() {

  info 'Setup IMAP Filter\n'
  ln -fs $DOTFILES_ROOT/imapfilter ~/.imapfilter

  user ' - What is the account name?'
  read -e imap_account
  user ' - What is your IMAP server?'
  read -e imap_server
  user ' - What is your IMAP username?'
  read -e imap_username
  user ' - What is your IMAP password?'
  read -e imap_password

  sed -e "s/IMAPACCOUNT/$imap_account/g" \
      -e "s/IMAPSERVER/$imap_server/g" \
      -e "s/IMAPUSERNAME/$imap_username/g" \
      imapfilter/config.lua.example > imapfilter/config.lua

  echo > imapfilter/credentials.txt
  openssl bf -in imapfilter/credentials.txt -out imapfilter/credentials.enc
  shred -u imapfilter/credentials.txt

  success 'IMAPFilter'

  info 'Setup Offiline IMAP\n'
  sed -e "s/IMAPACCOUNT/$imap_account/g" \
      offlineimap/offlineimaprc.symlink.example > offlineimaprc.symlink
  success 'OfflineIMAP'
}

setup_irssi() {
  info 'Setup IRSSI configuration'
  [ -d ~/.irssi ] && rm -rf ~/.irssi
  ln -fs ~/dotfiles/irssi ~/.irssi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done

  # Symlink dotfile root to home directory
  [ -L ~/dotfiles ] || ln -fs $DOTFILES_ROOT ~/dotfiles

}

setup_python() {
  info 'installing additional python packages via PIP'
  sudo pip install --upgrade pyzmq jinja2 tornado ipython notebooktools numpy pandas
}

setup_ranger() {
  info 'Setup RANGER configuration'
  [ -d ~/.config/ranger ] && rm -rf ~/.config/ranger
  [ -d ~/.config ] || mkdir ~/.config
  ln -s ~/dotfiles/ranger ~/.config/ranger
}

install_packages
setup_gitconfig
setup_zshell
setup_fonts
setup_vim
setup_gpg
setup_mutt
setup_imap
setup_irssi
setup_python
setup_ranger
install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if . bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi


echo ''
echo '  All installed!'
